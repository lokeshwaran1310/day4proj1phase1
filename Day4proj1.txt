Program Structure
-----------------


day4proj1phase1/
│
├── README.md
├── pom.xml
├── .gitignore
├── src/
│   └── main/
│       └── java/
│           ├── exceptions/
│           │   └── invalidAgeExceptions.java
│           ├── models/
│           │   ├── User.java
│           │   └── Address.java
│           ├── services/
│           │   ├── UserService.java
│           │   └── ValidationService.java
│           └── com/
│               └── day4proj1phase1/
│                   └── App.java
├── target/
│   └── (build output)
└── test/
    └── (unit tests)



invalidAgeExceptions.java
-------------------------


package exceptions;

public class invalidAgeExceptions extends Exception{
    public invalidAgeExceptions(String message){
      super(message);
    }
}

Main.java
---------

package main;

import exceptions.invalidAgeExceptions;
import models.User;
import services.UserService;

public class Main {
    public static void main(String[] args) {
        UserService obj=new UserService();
    User obj1=new User("lokesh",21);
    User obj2=new User("sounder", 17);
    User obj3=new User("adrin",20);    
    User [] arr={obj1,obj2,obj3}; 
            for(User user:arr){
                try{
                obj.registeruser(user);
                }
                catch(invalidAgeExceptions e){
                    System.out.println("Registration failed: "+e.getMessage());
                }
            }
}
}


User.java
---------

package models;

public class User {
    private String username;
    private int age;
    public User(String username,int age){
        this.username=username;
        this.age=age;
        
    }
    public String getUsername() {
        return username;
    }
    public int getAge() {
        return age;
    }
    
}


UserService.java
----------------

package services;

import exceptions.invalidAgeExceptions;
import models.User;

public class UserService {
    public void registeruser(User user) throws invalidAgeExceptions{
        if(user.getAge()<18){
            throw new invalidAgeExceptions("User- "+user.getUsername()+" is underaged");
        }
            System.out.println("Registered Successfully Welcome "+user.getUsername());
        

    }
}


.gitignore
-----------

echo ".idea/
target/
*.iml
*.class
*.war
*.log
*.tmp
.DS_Store"

Output
------

Registered Successfully Welcome lokesh
Registration failed: User- sounder is underaged
Registered Successfully Welcome adrin


Readme.md
---------

User Registration System

Description:
This project is a simple Java-based user registration system that uses custom exception handling to validate user age. Users under the age of 18 are rejected with a clear error message.

Components:
User.java: Represents a user with username and age fields.
UserService.java: Handles the registration logic and age validation.
invalidAgeExceptions.java: Custom exception class thrown when a user is underaged.
Main.java: Entry point of the application where sample users are created and registration is attempted.
pom.xml: Maven configuration file.
.gitignore: Specifies files and folders to be ignored by Git.

Purpose:
The project demonstrates:
How to organize a Java application using packages.
The use of custom exceptions to enforce business rules.
Basic object-oriented design and exception handling in Java.

High-Level Design:
User Creation: Users are instantiated with name and age.
Validation: The UserService checks each user's age.
Exception Handling: If a user is underaged, invalidAgeExceptions is thrown and caught in the main method.
Output: Messages are displayed indicating success or failure of registration.

Author:
Name: Lokeshwaran M
Email: lokeshwaran.m@epssw.com
Date: July 24, 2025



